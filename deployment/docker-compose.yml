version: "3.9"


services:
  fastapi:
    container_name: fastapi-backend
    build:
      context: ..
      dockerfile: deployment/fastapi.Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV:-false}
    restart: always
    depends_on:
      - pg_database
      - rabbitmq
    networks:
      - backend
    command:
      /bin/sh -c "alembic upgrade head && python -m src"
    ports:
      - "80:8080"
    env_file:
      - ../.env

  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - pg_database
    container_name: pgadmin-client
    env_file: ../.env
    restart: always
    ports:
      - "5050:80"

  pg_database:
    container_name: ${DB_CONTAINER_NAME:-postgres}
    image: postgres:14-alpine
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - "../.env"
    logging:
      driver: "json-file"
      options:
        max-size: 10m
        max-file: "3"
        labels: "dev_status"
        env: "os"
    environment:
      - os=ubuntu
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 1s
      timeout: 5s
      retries: 5
    networks:
      - backend
    expose:
      - 5432

  rabbitmq:
    container_name: rabbitmq-broker
    image: rabbitmq:management-alpine
    restart: on-failure
    env_file:
      - "../.env"
    stop_signal: SIGINT
    logging:
      driver: "json-file"
      options:
        max-size: 10m
        max-file: "3"
        labels: "dev_status"
        env: "os"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5
    environment:
      - os=ubuntu
    ports:
      - "32121:15672"
      - "5672:5672"
    networks:
      - backend

volumes:
  pgdata:
    name: postgres-data

networks:
  backend:
    driver: bridge

